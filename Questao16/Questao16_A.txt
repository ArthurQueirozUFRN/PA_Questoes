#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void inserir(int tam, int num[]){
  printf("Digite os numeros: \n");
  for(int i=0; i<tam; i++){
    scanf("%f", &num[i]);
  }
}

void ordenar(int tam, int num[]){
  for( int i=0; i<tam; i++ ){
    for( int j=i+1; j<tam; j++ ){
      if( num[i] > num[j] ){
        float aux;
        aux = num[i];
        num[i] = num[j];
        num[j] = aux;
      }
    }
  }
}

int main() {
  int tam;
  float *p;
  clock_t inicio, fim; // variáveis para armazenar o tempo de início e fim da execução

  printf("Quantos numeros? \n");
  scanf("%d", &tam);

  p = malloc(tam * sizeof(float));

  inserir(tam, p);

  inicio = clock(); // registra o tempo de início da execução da função de ordenação
  ordenar(tam, p);
  fim = clock(); // registra o tempo de fim da execução da função de ordenação

  double tempo_execucao = (double) (fim - inicio) / CLOCKS_PER_SEC; // calcula o tempo total de execução em segundos

  printf("Tempo de execucao: %.6f segundos\n", tempo_execucao); // imprime o tempo total de execução

  for(int i=0; i<tam; i++){
    printf("%.2f ", p[i]);
  }

  return 0;
}

// O  primeiro codigo, sem a função qsort(), apresentou um tempo de execução de: 0.000001 segundos
// O segundo codigo, com a função qsort(), apresentou um tempo de execução de: 0.000002 segundos
// Portanto, o primeiro cod acaba sendo mais rapido.